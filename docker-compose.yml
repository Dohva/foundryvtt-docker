services:
  # Caddy reverse proxy
  caddy:
    env_file: .env
    image: caddy
    container_name: caddy
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile  # Mount the Caddyfile to the Caddy container
      - caddy_data:/data                  # For Let's Encrypt data storage
      - caddy_config:/config              # For Caddy's configuration data
    networks:
      - webnet

  # Your main application
  foundry:
    image: foundry
    container_name: foundry
    expose:
      - "30000"  # App running on port 3000 internally
    volumes:
      - /foundry/volume/backups:/foundrydata
    networks:
      - webnet
  # Postgresql for Zipline
  postgresql:
    image: postgres:16
    restart: unless-stopped
    env_file:
      - .env
    networks:
      - webnet
    environment:
      POSTGRES_USER: ${POSTGRESQL_USER:-zipline}
      POSTGRES_PASSWORD: ${POSTGRESQL_PASSWORD:?POSTGRESSQL_PASSWORD is required}
      POSTGRES_DB: ${POSTGRESQL_DB:-zipline}
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ['CMD', 'pg_isready', '-U', 'zipline']
      interval: 10s
      timeout: 5s
      retries: 5
  # Zipline
  zipline:
    image: ghcr.io/diced/zipline:latest
    container_name: zipline
    restart: unless-stopped
    ports:
      - '3000' # Run on port 3000 internally
    env_file:
      - .env
    networks:
      - webnet
    environment:
      - DATABASE_URL=postgres://${POSTGRESQL_USER:-zipline}:${POSTGRESQL_PASSWORD}@postgresql:5432/${POSTGRESQL_DB:-zipline}
    depends_on:
      postgresql:
        condition: service_healthy
    volumes:
      - './uploads:/zipline/uploads'
      - './public:/zipline/public'
      - './themes:/zipline/themes'
    healthcheck:
      test: ['CMD', 'wget', '-q', '--spider', 'http://0.0.0.0:3000/api/healthcheck']
      interval: 15s
      timeout: 2s
      retries: 2

networks:
  webnet:
    driver: bridge

volumes:
  pgdata:
  caddy_data:
  caddy_config: